bool ispalindrome(string s,int i,int j){
    while(i<j){
    if(s[i]!=s[j])return false;
    i++;
    j--;
    }
    return true;
}
     int dp[501][501];
     int solve(string s,int i,int j){
         int mn=1e9;
         if(i>=j)return 0;
         if(ispalindrome(s,i,j))return 0;
          for(int k=i;k<=j-1;k++){
              int left,right;
              if(dp[i][k]!=-1)left=dp[i][k];
              else {
                  left=solve(s,i,k);
                  dp[i][k]=left;
              }
              if(dp[k+1][j]!=-1)right=dp[k+1][j];
              else{
                  right=solve(s,k+1,j);
                  dp[k+1][j]=right;
              }
              int temp=left+right+1;
              mn=min(mn,temp);
          }
          return dp[i][j]=mn;
     }
    int palindromicPartition(string str)
    {
        
        memset(dp,-1,sizeof(dp));
        int i=0;
        int j=str.size()-1;
        return solve(str,i,j);
    }
