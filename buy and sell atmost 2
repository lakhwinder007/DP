///////////////////////recursion ////////////////////////////

int solve(vector<int>&price,int i,int buy,int cap){
    if(cap==0||i==price.size())return 0;
  //  for(int i=0;i<price.size();i++){
        if(buy){
            return max(-price[i]+solve(price,i+1,0,cap),solve(price,i+1,1,cap));
            
        }
        else{
            return max(price[i]+solve(price,i+1,1,cap-1),solve(price,i+1,0,cap));
        }
        
   // }
    
}
int maxProfit(vector<int>&price){
    
    int n=price.size();
    int buy=1;
    int cap=2;
    return solve(price,0,buy,cap);
}

/////////////////////////memoization//////////////////////////////////////////

int dp[100001][2][2+1];
int solve(vector<int>&price,int i,int buy,int cap){
    if(cap==0||i==price.size())return 0;
    if(dp[i][buy][cap]!=-1)return dp[i][buy][cap];
  //  for(int i=0;i<price.size();i++){
        if(buy){
            return dp[i][buy][cap]= max(-price[i]+solve(price,i+1,0,cap),solve(price,i+1,1,cap));
            
        }
        else{
            return dp[i][buy][cap]=max(price[i]+solve(price,i+1,1,cap-1),solve(price,i+1,0,cap));
        }
        
   // }
    
}
int maxProfit(vector<int>&price){
    memset(dp,-1,sizeof(dp));
    int n=price.size();
    int buy=1;
    int cap=2;
    return solve(price,0,buy,cap);
}

///////////////////////////////////////////tabulation///////////////////////////////////////

int dp[100001][2][2+1];
int solve(vector<int>&price,int i,int buy,int cap){
  
  
       
        int n=price.size();
   for(int i=n-1;i>=0;i--){
       for(int j=0;j<2;j++){
           for(int k=1;k<3;k++){
                if(j){
         dp[i][j][k]= max(-price[i]+dp[i+1][0][k],dp[i+1][1][k]);
            
        }
        else{
            dp[i][j][k]=max(price[i]+dp[i+1][1][k-1],dp[i+1][0][k]);
        }
       
           }
       }
   }
   
    return dp[0][1][2];
}
int maxProfit(vector<int>&price){
   // memset(dp,-1,sizeof(dp));
    int n=price.size();
    int buy=1;
    int cap=2;
    for(int i=0;i<n;i++){
        for(int j=0;j<2;j++){
            dp[i][j][0]=0;
        }
    }
    for(int i=0;i<2;i++){
        for(int j=0;j<3;j++){
            dp[n][i][j]=0;
        }
    }
    
    return solve(price,0,buy,cap);
}
